/*
 * SPI.h
 *
 *  Created on: Jul 29, 2019
 *      Author: sberk
 */

#ifndef SPI_H_
#define SPI_H_

#define ALERTDELAY 42000

void outputAlert(void);

//all look up tables consist of 64 values as chars

//square wave look up table
char squareData[64] = {
                       0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                       0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                       0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                       0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                       0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

//triangle wave look up table
char triangleData[64] = {
                         0x8,0x10,0x18,0x20,0x28,0x30,0x38,0x40,
                         0x48,0x50,0x58,0x60,0x68,0x70,0x78,0x80,
                         0x87,0x8f,0x97,0x9f,0xa7,0xaf,0xb7,0xbf,
                         0xc7,0xcf,0xd7,0xdf,0xe7,0xef,0xf7,0xff,
                         0xf7,0xef,0xe7,0xdf,0xd7,0xcf,0xc7,0xbf,
                         0xb7,0xaf,0xa7,0x9f,0x97,0x8f,0x87,0x80,
                         0x78,0x70,0x68,0x60,0x58,0x50,0x48,0x40,
                         0x38,0x30,0x28,0x20,0x18,0x10,0x8,0x0
};

//sawtooth wave look up table
char sawtoothData[64] = {

                         0x4,0x8,0xc,0x10,0x14,0x18,0x1c,0x20,
                         0x24,0x28,0x2c,0x30,0x34,0x38,0x3c,0x40,
                         0x44,0x48,0x4c,0x50,0x54,0x58,0x5c,0x60,
                         0x64,0x68,0x6c,0x70,0x74,0x78,0x7c,0x80,
                         0x83,0x87,0x8b,0x8f,0x93,0x97,0x9b,0x9f,
                         0xa3,0xa7,0xab,0xaf,0xb3,0xb7,0xbb,0xbf,
                         0xc3,0xc7,0xcb,0xcf,0xd3,0xd7,0xdb,0xdf,
                         0xe3,0xe7,0xeb,0xef,0xf3,0xf7,0xfb,0xff
};

//sine wave look up table
char sineData[64] = {
                         0x80,0x8c,0x98,0xa5,0xb0,0xbc,0xc6,0xd0,
                         0xda,0xe2,0xea,0xf0,0xf5,0xfa,0xfd,0xfe,
                         0xff,0xfe,0xfd,0xfa,0xf5,0xf0,0xea,0xe2,
                         0xda,0xd0,0xc6,0xbc,0xb0,0xa5,0x98,0x8c,
                         0x80,0x73,0x67,0x5a,0x4f,0x43,0x39,0x2f,
                         0x25,0x1d,0x15,0xf,0xa,0x5,0x2,0x1,
                         0x0,0x1,0x2,0x5,0xa,0xf,0x15,0x1d,
                         0x25,0x2f,0x39,0x43,0x4f,0x5a,0x67,0x73
};

//code from the module for interfacing MSP430F2274 with LTC1661 DAC using SPI

//
//   PIN1 = P2.2     (/CS)
//   PIN2 = P2.1     (Clock)
//   PIN3 = P2.0     (Data)
//   PIN4 = VCC      (VREF)
//   PIN5 = OUTPUTA
//   PIN6 = VCC      (Power)
//   PIN7 = GND      (Ground)
//   PIN8 = OUTPUTB
//
//  Following Code Writes to the DAC via bit-banging.
//  Spi Modules are encouraged for greater efficiency.
//
//  Code by Brandon Cerge - University of Florida
//
//----------------------------------------
//#include <msp430x22x2.h>

//old version
//int output = 0x0000;
//    char temp;
//    signed char x;
//    P2SEL &= 0xF8;  //select digital I/0
//    P2DIR |= 0x07;  //set direction register P2.0 - P2.2
//    P2OUT &= 0xF8;  // clear data, clock, and enable
//    P2OUT |= 0x04;  // set enable high
//    temp = data;    // format data
//    data >>= 4;
//    data &= 0x0F;
//    data |= 0xF0;
//    output = data;
//    output <<= 8;
//    data = temp;
//    data <<= 4;
//    data &= 0xF0;
//    output |= data;
//    P2OUT &= 0xFB;  //set enable low
//    for (x = 15; x > -1; x--){      //send out 16 bits of data
//        P2OUT |= (output >> x) & 0x01;
//        P2OUT |= 0x02;
//        P2OUT &= 0xFD;
//        P2OUT &= 0xFE;
//
//    }
//    P2OUT |= 0x04;  // set enable high

//made an error need to reverse pins
void dac_write(char data){
    int output = 0x0000;
    char temp;
    signed char x;
    P2SEL &= 0xF8;  //select digital I/0
    P2DIR |= 0x07;  //set direction register P2.0 - P2.2
    P2OUT &= 0xF8;  // clear data, clock, and enable
    P2OUT |=  0x01;//0x04;  // set enable high
    temp = data;    // format data
    data >>= 4;
    data &= 0x0F;
    data |= 0xF0;
    output = data;
    output <<= 8;
    data = temp;
    data <<= 4;
    data &= 0xF0;
    output |= data;
    P2OUT &= 0xFE;//0xFB;  //set enable low
    for (x = 15; x > -1; x--){      //send out 16 bits of data
        P2OUT |= (output >> (x-3)) & 0x04;//0x01; raise data
        P2OUT |= 0x02; //raise clock
        P2OUT &= 0xFD; //lower clock
        P2OUT &= 0xFB;//0xFE;

    }

    P2OUT |= 0x01;//0x04;  // set enable high
}

void outputAlert(void){

    int dacIndex = 0;

        for (dacIndex = 0; dacIndex < 64; dacIndex++){
                dac_write(sineData[dacIndex]);
                __delay_cycles(ALERTDELAY);
        }


}


#endif /* SPI_H_ */
